import cv2
import mediapipe as mp
import time

# Initialize MediaPipe Face Detection
mp_face_mesh = mp.solutions.face_mesh
#mp_face_mesh is just a variable name and can be changed to anything that is meaningful to you
#The mp.solutions.face_mesh module from MediaPipe provides a solution for real-time face landmark detection. 
#Internally, it leverages a deep learning model to detect and track facial landmarks with high accuracy and efficiency.
#Hereâ€™s an overview of the internal operation:
face_mesh = mp_face_mesh.FaceMesh(static_image_mode=False, max_num_faces=1, min_detection_confidence=0.5)

# Initialize MediaPipe Drawing
mp_drawing = mp.solutions.drawing_utils
drawing_spec = mp_drawing.DrawingSpec(thickness=1, circle_radius=1, color=(0, 255, 0))

# Open the webcam
cap = cv2.VideoCapture(0)

# Path to the relevant image
relevant_image_path = 'dayan1.jpeg'
relevant_image = cv2.imread(relevant_image_path)

# Variable to track the time when the image is displayed
start_time = None

while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        break

    # Convert the BGR image to RGB
    rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)

    # Process the image and find face landmarks
    result = face_mesh.process(rgb_frame)

    # Check if faces are detected
    if result.multi_face_landmarks:
        # Display the relevant image in a new window if not already displayed
        if start_time is None:
            start_time = time.time()  # Record the start time
            cv2.imshow('Relevant Image', relevant_image)
        
        # Draw the face landmarks
        for face_landmarks in result.multi_face_landmarks:
            for landmark in face_landmarks.landmark:
                # Get the landmark coordinates
                x = int(landmark.x * frame.shape[1])
                y = int(landmark.y * frame.shape[0])

                # Draw a circle for each landmark
                cv2.circle(frame, (x, y), drawing_spec.circle_radius, drawing_spec.color, drawing_spec.thickness)

        # Check if 10 seconds have passed since the image was displayed
        if start_time is not None and time.time() - start_time > 10:
            cv2.destroyWindow('Relevant Image')
            start_time = None  # Reset the timer

    else:
        # Close the relevant image window if no faces are detected
        if cv2.getWindowProperty('Relevant Image', cv2.WND_PROP_VISIBLE) >= 1:
            cv2.destroyWindow('Relevant Image')
            start_time = None  # Reset the timer

    # Display the output
    cv2.imshow('Face Landmarks', frame)

    if cv2.waitKey(1) & 0xFF == 27:  # Press 'Esc' to exit
        break

cap.release()
cv2.destroyAllWindows()
